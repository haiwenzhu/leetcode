class Solution:
    """
    @see https://oj.leetcode.com/problems/decode-ways/
    """
    # @param s, a string
    # @return an integer
    def numDecodings(self, s):
        l = len(s)
        if l == 0:
            return 0
        subStr = ''
        subStrLen = 0
        lastC  = '' 
        count = 1
        for c in s:
            intC = int(c)
            if lastC == '1' or (lastC == '2' and intC <= 6):
                    subStr += c
                    subStrLen += 1
            else:
                if intC == 0:
                    return 0
                if subStrLen > 1:
                    count *= self._decode(subStr, subStrLen)
                if intC == 1 or intC == 2:
                    subStr = c 
                    subStrLen = 1
                else:
                    subStr = ''
                    subStrLen = 0
            lastC = c
        if subStrLen > 1:
            count *= self._decode(subStr, subStrLen)
        return count
        
    def _decode(self, s, l):
        if l == 0 or s[0] == '0':
            return 0
        elif l == 1:
            return 1
        elif l == 2:
            if int(s) <= 26 and s[1] != '0':
                return 2
            else:
                return 1
        else:
            if s[1] == '0':
                return self._decode(s[2:], l-2)
            elif int(s[0:2]) > 26:
                return self._decode(s[1:], l-1)
            else:
                return self._decode(s[1:], l-1) + self._decode(s[2:], l-2)

if __name__ == "__main__":
    solution = Solution()
    print(solution.numDecodings('110'));
    #print(solution.numDecodings
